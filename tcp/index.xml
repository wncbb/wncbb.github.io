<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tcps on WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/tcp/</link>
    <description>Recent content in Tcps on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Sep 2021 14:07:31 +0800</lastBuildDate><atom:link href="https://wncbb.github.io/tcp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tcp</title>
      <link>https://wncbb.github.io/tcp/tcp/</link>
      <pubDate>Tue, 14 Sep 2021 14:07:31 +0800</pubDate>
      
      <guid>https://wncbb.github.io/tcp/tcp/</guid>
      <description>流量控制 发送窗口，接收窗口
发送窗口数据分四类：
 已发送已确认(Sent and Acknowledged) 已发送未确认(Send But Not Yet Acknowledged) 未发送但是可以发送(Not Sent，Recipient Ready to Receive) 未发送且不允许发送(Not Sent，Recipient Not Ready to Receive)  接收窗口数据分三类：
 Received and ACK Not Send to Process Received Not ACK 有空位，还没有被接收的数据(Not Received)  拥塞控制 TCP的四种拥塞控制算法 拥塞窗口(cwnd) 1.慢开始 2.拥塞控制 3.快重传 4.快恢复
有一个ssthreash(slow start thresh) cwnd&amp;lt;ssthresh 慢开始算法，每次窗口加倍 cwnd=ssthresh 慢开始算法/拥塞避免算法 都可以 cwnd&amp;gt;ssthresh 拥塞避免算法，每次窗口加一
快重传：首先要求接收方每收到一个失序的报文段就立即发出重复确认（为的是使发送方及早的知道有报文段没有到达对方）而不要等到自己发送数据时才捎带确认。 快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待为其设置的重传计时器到期。
快恢复：如果发生超时，cwnd窗口减半，然后使用拥塞避免算法 </description>
    </item>
    
  </channel>
</rss>
