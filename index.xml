<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/</link>
    <description>Recent content on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Jul 2022 18:51:58 +0800</lastBuildDate><atom:link href="https://wncbb.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>k8s系列(一) 本地环境安装</title>
      <link>https://wncbb.github.io/k8s/install/</link>
      <pubDate>Sat, 23 Jul 2022 18:51:58 +0800</pubDate>
      
      <guid>https://wncbb.github.io/k8s/install/</guid>
      <description>本地k8s环境搭建
1.1 准备虚拟机环境 虚拟机CPU最少2个核， 内存最少8G， 磁盘最少30G。
1.2 设置静态IP 编辑文件/etc/netplan/01-network-manager-all.yaml, 内容修改为如下所示：
# Let NetworkManager manage all devices on this system network: version: 2 renderer: NetworkManager ethernets: enp0s3: # Get from ifconfig dhcp4: yes addresses: [192.168.1.190/24] # change according to local network gateway4: 192.168.1.1 # change according to local network # nameservers: # addresses: [114.114.114.114] # hange according to local network 执行命令netplay apply应用修改
1.3 安装ssh 安装命令
sudo apt install openssh-server sudo service ssh restart sudo service ssh start 1.</description>
    </item>
    
    <item>
      <title>XA</title>
      <link>https://wncbb.github.io/distributed_system/xa/</link>
      <pubDate>Thu, 13 Jan 2022 18:03:23 +0800</pubDate>
      
      <guid>https://wncbb.github.io/distributed_system/xa/</guid>
      <description>xa_start xa_start sql xa_end xa_preparre xa_commit/xa_rollback xa_end </description>
    </item>
    
    <item>
      <title>ARC: Adaptive Replacement Cache</title>
      <link>https://wncbb.github.io/cache/arc/</link>
      <pubDate>Mon, 10 Jan 2022 19:49:48 +0800</pubDate>
      
      <guid>https://wncbb.github.io/cache/arc/</guid>
      <description>介绍 wiki地址
ARC是一种比LRU表现更好的缓存算法。该算法会综合利用recency与frequency以及两者最近逐出的数据，来做缓存逐出。
ARC会把cache directory分为两部分，T1与T2，分别对应recency与frequency。T1与T2分别对应两个ghost listB1与B2,分别存储T1与T2逐出的entry的key。
Ghost lists可以追踪最近那些被逐出的entry的是从recency还是frquency被逐出的，从而动态调整T1与T2的值。
T1: 存储LRU T2: 存储LFU B1: 存储从T1中逐出的entry B2: 存储从T2中逐出的entry
T1与B1结合起来是L1; T2与B2结合起来是L2.
整个L1与L2可以表示成如下所示的结构
. . . [ B1 &amp;lt;-[ T1 &amp;lt;-!-&amp;gt; T2 ]-&amp;gt; B2 ] . . [ . . . . [ . . . . . . ! . .^. . . . ] . . . . ] [ fixed cache size (c) ] 里面的中括号存储的数据，是实实在在的cache数据。T1与T2的整体的长度是固定长度size。可以在B1与B2之间移动。
L1是从右向左展示，比如!左侧的第一个数据，是LRU的最新的数据。 ^是期望的T1的长度，这个长度可以大于等于小于实际的长度。
进入T1的新的entry，会从!左侧加入，慢慢被push到left，最后会被驱除出T1,放到B1里，最后会被彻底删除。
如果L1里的数据，被再次访问，就会被加入到L2中。也就是!右侧第一个位置。如果L2中的数据被再次访问，会再次放到!右侧第一个位置。
被加入T1 T2的entry,会导致!慢慢向^靠近。如果在cache中已经没有空闲位置了，^会决定从T1里还是T2里驱逐entry。</description>
    </item>
    
    <item>
      <title>Kubernetes学习笔记(一) 网络基础part1</title>
      <link>https://wncbb.github.io/k8s/network_1/</link>
      <pubDate>Sat, 08 Jan 2022 18:12:48 +0800</pubDate>
      
      <guid>https://wncbb.github.io/k8s/network_1/</guid>
      <description>Kubernetes is All about Networking.
 因此，先从网络开始学习。
 基础知识视频： https://www.youtube.com/watch?v=6v_BDHIgOY8 基础知识视频的代码地址：https://github.com/kristenjacobs/container-networking  1 k8s网络要求  All containers can communicate with all other containers without NAT. All nodes can communicate with all containers(and vice-verse) without NAT. The IP that a container sees itself as is the same IP that others see it as.  2 网络 2.1 Single network namespace. 整体示意图：根据本地网络环境，设置IP env.sh
CON=&amp;#34;con&amp;#34; NODE_IP=&amp;#34;10.0.2.15&amp;#34; IP=&amp;#34;172.16.0.1&amp;#34; 下面对setup.sh每条命令，进行解释
2.1.1 设置CON/NODE_IP/IP环境变量 #!/bin/bash -e  .</description>
    </item>
    
    <item>
      <title>Lucene学习笔记(一) 官方demo</title>
      <link>https://wncbb.github.io/lucene/lucene_1/</link>
      <pubDate>Mon, 03 Jan 2022 16:25:55 +0800</pubDate>
      
      <guid>https://wncbb.github.io/lucene/lucene_1/</guid>
      <description>官方demo地址： https://lucene.apache.org/core/9_0_0/demo/index.html#About_the_Demo
1 主要步骤 1.1 下载lucene 下载地址: https://lucene.apache.org/
jar包目录：lucene-9.0.0/modules
1.2 配置java环境 官方下载安装
# 执行如下命令，可以看到安装地址 /usr/libexec/java_home # source以下内容 JAVA_HOME=&amp;quot;&amp;lt;/usr/libexec/java_home的结果&amp;gt;&amp;quot; export JAVA_HOME PATH=$JAVA_HOME/bin:$PATH export PATH CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:. export CLASSPATH 1.3 运行demo 例子文件 ./docs/alice.txt
watch movie listen music ./docs/todd.txt
watch movie bodybuilding 1.3.1 indexing 运行indexing
java -cp ./lucene-core-9.0.0.jar:./lucene-queryparser-9.0.0.jar:./lucene-analysis-common-9.0.0.jar:./lucene-demo-9.0.0.jar org.apache.lucene.demo.IndexFiles -docs ./docs Indexing to directory &amp;#39;index&amp;#39;... adding ./docs/alice.txt adding ./docs/todd.txt Indexed 2 documents in 524 milliseconds index目录被创建
index ├── _0.cfe ├── _0.cfs ├── _0.si ├── segments_1 └── write.</description>
    </item>
    
    <item>
      <title>Docker学习笔记(一) namespace</title>
      <link>https://wncbb.github.io/docker/namespace/</link>
      <pubDate>Sat, 01 Jan 2022 17:30:14 +0800</pubDate>
      
      <guid>https://wncbb.github.io/docker/namespace/</guid>
      <description>1 概述 不同container运行需要做资源隔离，使用linux namespace功能。
Namespace是linux kernel提供的一种资源隔离方案。
系统可以位进程分配不同的Namespace，并保证不同的Namespace资源独立分配，进程彼此隔离。不同Namespace下的进程，互不干扰。
Linux内核通过进程描述符task_struct结构体来管理进程。
进程数据结构
struct task_struct{ ... /* namespaces */ struct nsproxy *nsproxy; ... } nsproxy具体定义：
/* * A structure to contain pointers to all per-process * namespaces - fs (mount), uts, network, sysvipc, etc. * * The pid namespace is an exception -- it&amp;#39;s accessed using * task_active_pid_ns. The pid namespace here is the * namespace that children will use. * * &amp;#39;count&amp;#39; is the number of tasks holding a reference.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://wncbb.github.io/about/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0800</pubDate>
      
      <guid>https://wncbb.github.io/about/</guid>
      <description>多看多读多写多总结
 github  </description>
    </item>
    
    <item>
      <title>Comment Policy</title>
      <link>https://wncbb.github.io/comment_policy/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0800</pubDate>
      
      <guid>https://wncbb.github.io/comment_policy/</guid>
      <description>Obey laws.</description>
    </item>
    
  </channel>
</rss>
