<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/</link>
    <description>Recent content on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jan 2022 22:14:50 +0800</lastBuildDate><atom:link href="https://wncbb.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comment Policy</title>
      <link>https://wncbb.github.io/comment_policy/</link>
      <pubDate>Sat, 08 Jan 2022 22:47:25 +0800</pubDate>
      
      <guid>https://wncbb.github.io/comment_policy/</guid>
      <description>Follow local laws</description>
    </item>
    
    <item>
      <title>每日一题 2022_01_08</title>
      <link>https://wncbb.github.io/oneproblemperday/oppd_2022_01_08/</link>
      <pubDate>Sat, 08 Jan 2022 22:14:50 +0800</pubDate>
      
      <guid>https://wncbb.github.io/oneproblemperday/oppd_2022_01_08/</guid>
      <description>leetcode.cn 89.格雷编码
最棒题解
1func grayCode(n int) []int { 2 // n=0时，就是一个数0 3 ans:=make([]int, 1, 1&amp;lt;&amp;lt;n) 4 // a=上一行的数据 5 // b=上一行的数据翻转，然后每个元素前面加1(比如10， 变成110) 6 // 这一行的数据=a+b(数组连接) 7 // curRow=prevRow+Reverse(prevRow).map(v=&amp;gt;v+head) 8 head:=1 9 for i:=0; i&amp;lt;n; i++{ 10 for j:=len(ans)-1; j&amp;gt;=0; j--{ 11 ans=append(ans, head+ans[j]) 12 } 13 head=head&amp;lt;&amp;lt;1 14 } 15 return ans 16} leetcode.com 1463.Cherry Pickup II
最棒题解
1func cherryPickup(grid [][]int) int { 2	n:=len(grid) 3	m:=len(grid[0]) 4 // dp[i][j][k]表示，机器人1在位置(i, j),机器人2在位置(i, k)时，最大值。 5	dp:=make([][][]int,n) 6	for k,_:=range dp{ 7	dp[k]=make([][]int,m) 8	for i,_:=range dp[k]{ 9	dp[k][i]=make([]int,m) 10	for j,_:=range dp[k][i]{ 11 // -1 表示这个位置还没有计算 12	dp[k][i][j]=-1 13	} 14	} 15	} 16 // 当i=0时，刚开始机器人1在(0, 0)， 机器人2在(0， n-1)，不需要计算。 17	dp[0][0][len(grid[0])-1]=grid[0][0]+grid[0][len(grid[0])-1] 18	for i:=0;i&amp;lt;n-1;i++{ 19	for j:=0;j&amp;lt;m;j++{ 20	for k:=0;k&amp;lt;m;k++{ 21	if dp[i][j][k]!</description>
    </item>
    
    <item>
      <title>Kubernetes学习笔记(一) 网络基础part1</title>
      <link>https://wncbb.github.io/k8s/network_1/</link>
      <pubDate>Sat, 08 Jan 2022 18:12:48 +0800</pubDate>
      
      <guid>https://wncbb.github.io/k8s/network_1/</guid>
      <description>Kubernetes is All about Networking.
 因此，先从网络开始学习。
 基础知识视频： https://www.youtube.com/watch?v=6v_BDHIgOY8 基础知识视频的代码地址：https://github.com/kristenjacobs/container-networking  1 k8s网络要求  All containers can communicate with all other containers without NAT. All nodes can communicate with all containers(and vice-verse) without NAT. The IP that a container sees itself as is the same IP that others see it as.  2 网络 2.1 Single network namespace. 整体示意图：根据本地网络环境，设置IP env.sh
CON=&amp;#34;con&amp;#34; NODE_IP=&amp;#34;10.0.2.15&amp;#34; IP=&amp;#34;172.16.0.1&amp;#34; 下面对setup.sh每条命令，进行解释
2.1.1 设置CON/NODE_IP/IP环境变量 #!/bin/bash -e  .</description>
    </item>
    
    <item>
      <title>Lucene学习笔记(一) 官方demo</title>
      <link>https://wncbb.github.io/lucene/lucene_1/</link>
      <pubDate>Mon, 03 Jan 2022 16:25:55 +0800</pubDate>
      
      <guid>https://wncbb.github.io/lucene/lucene_1/</guid>
      <description>官方demo地址： https://lucene.apache.org/core/9_0_0/demo/index.html#About_the_Demo
1 主要步骤 1.1 下载lucene 下载地址: https://lucene.apache.org/
jar包目录：lucene-9.0.0/modules
1.2 配置java环境 官方下载安装
# 执行如下命令，可以看到安装地址 /usr/libexec/java_home # source以下内容 JAVA_HOME=&amp;quot;&amp;lt;/usr/libexec/java_home的结果&amp;gt;&amp;quot; export JAVA_HOME PATH=$JAVA_HOME/bin:$PATH export PATH CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:. export CLASSPATH 1.3 运行demo 例子文件 ./docs/alice.txt
watch movie listen music ./docs/todd.txt
watch movie bodybuilding 1.3.1 indexing 运行indexing
java -cp ./lucene-core-9.0.0.jar:./lucene-queryparser-9.0.0.jar:./lucene-analysis-common-9.0.0.jar:./lucene-demo-9.0.0.jar org.apache.lucene.demo.IndexFiles -docs ./docs Indexing to directory &amp;#39;index&amp;#39;... adding ./docs/alice.txt adding ./docs/todd.txt Indexed 2 documents in 524 milliseconds index目录被创建
index ├── _0.cfe ├── _0.cfs ├── _0.si ├── segments_1 └── write.</description>
    </item>
    
    <item>
      <title>Docker学习笔记(一) namespace</title>
      <link>https://wncbb.github.io/docker/namespace/</link>
      <pubDate>Sat, 01 Jan 2022 17:30:14 +0800</pubDate>
      
      <guid>https://wncbb.github.io/docker/namespace/</guid>
      <description>1 概述 不同container运行需要做资源隔离，使用linux namespace功能。
Namespace是linux kernel提供的一种资源隔离方案。
系统可以位进程分配不同的Namespace，并保证不同的Namespace资源独立分配，进程彼此隔离。不同Namespace下的进程，互不干扰。
Linux内核通过进程描述符task_struct结构体来管理进程。
进程数据结构
struct task_struct{ ... /* namespaces */ struct nsproxy *nsproxy; ... } nsproxy具体定义：
/* * A structure to contain pointers to all per-process * namespaces - fs (mount), uts, network, sysvipc, etc. * * The pid namespace is an exception -- it&amp;#39;s accessed using * task_active_pid_ns. The pid namespace here is the * namespace that children will use. * * &amp;#39;count&amp;#39; is the number of tasks holding a reference.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://wncbb.github.io/about/</link>
      <pubDate>Thu, 01 Jan 1970 00:00:00 +0800</pubDate>
      
      <guid>https://wncbb.github.io/about/</guid>
      <description>多看多读多写多总结
 github  </description>
    </item>
    
  </channel>
</rss>
