<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/</link>
    <description>Recent content on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jan 2022 16:25:55 +0800</lastBuildDate><atom:link href="https://wncbb.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lucene学习笔记(一) 官方demo</title>
      <link>https://wncbb.github.io/lucene/lucene_1/</link>
      <pubDate>Sat, 08 Jan 2022 16:25:55 +0800</pubDate>
      
      <guid>https://wncbb.github.io/lucene/lucene_1/</guid>
      <description>官方demo地址： https://lucene.apache.org/core/9_0_0/demo/index.html#About_the_Demo
1 主要步骤 1.1 下载lucene 下载地址: https://lucene.apache.org/
jar包目录：lucene-9.0.0/modules
1.2 配置java环境 官方下载安装
# 执行如下命令，可以看到安装地址 /usr/libexec/java_home # source以下内容 JAVA_HOME=&amp;quot;&amp;lt;/usr/libexec/java_home的结果&amp;gt;&amp;quot; export JAVA_HOME PATH=$JAVA_HOME/bin:$PATH export PATH CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:. export CLASSPATH 1.3 运行demo 例子文件 ./docs/alice.txt
watch movie listen music ./docs/todd.txt
watch movie bodybuilding 1.3.1 indexing 运行indexing
java -cp ./lucene-core-9.0.0.jar:./lucene-queryparser-9.0.0.jar:./lucene-analysis-common-9.0.0.jar:./lucene-demo-9.0.0.jar org.apache.lucene.demo.IndexFiles -docs ./docs Indexing to directory &amp;#39;index&amp;#39;... adding ./docs/alice.txt adding ./docs/todd.txt Indexed 2 documents in 524 milliseconds index目录被创建
index ├── _0.cfe ├── _0.cfs ├── _0.si ├── segments_1 └── write.</description>
    </item>
    
    <item>
      <title>Docker学习笔记(一) namespace</title>
      <link>https://wncbb.github.io/docker/namespace/</link>
      <pubDate>Wed, 05 Jan 2022 17:30:14 +0800</pubDate>
      
      <guid>https://wncbb.github.io/docker/namespace/</guid>
      <description>1 概述 不同container运行需要做资源隔离，使用linux namespace功能。
Namespace是linux kernel提供的一种资源隔离方案。
系统可以位进程分配不同的Namespace，并保证不同的Namespace资源独立分配，进程彼此隔离。不同Namespace下的进程，互不干扰。
Linux内核通过进程描述符task_struct结构体来管理进程。
进程数据结构
struct task_struct{ ... /* namespaces */ struct nsproxy *nsproxy; ... } nsproxy具体定义：
/* * A structure to contain pointers to all per-process * namespaces - fs (mount), uts, network, sysvipc, etc. * * The pid namespace is an exception -- it&amp;#39;s accessed using * task_active_pid_ns. The pid namespace here is the * namespace that children will use. * * &amp;#39;count&amp;#39; is the number of tasks holding a reference.</description>
    </item>
    
  </channel>
</rss>
