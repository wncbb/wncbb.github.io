<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algo_base on WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/series/algo_base/</link>
    <description>Recent content in algo_base on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Mar 2021 13:53:38 +0800</lastBuildDate>
    
	<atom:link href="https://wncbb.github.io/series/algo_base/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Binary Index Tree</title>
      <link>https://wncbb.github.io/posts/algo/binary-index-tree/</link>
      <pubDate>Tue, 02 Mar 2021 13:53:38 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/binary-index-tree/</guid>
      <description>package main import &amp;quot;fmt&amp;quot; type BinaryIndexTree struct { raw []int } // lowbit的作用： // x的二进制表示： xxxx...10...0 // 返回 10...0 // 换句话说，返回二进制表示形式中，最低位1所组成的数字 func lowbit(x int) int { return x &amp;amp; (-1 * x) } func (b *BinaryIndexTree) Build(s []int) { b.raw = make([]int, len(s)+1, len(s)+1) for idx, v := range s { b.raw[idx+1] = v } for i := 1; i &amp;lt; len(b.raw); i++ { j := i + lowbit(i) if j &amp;lt; len(b.</description>
    </item>
    
    <item>
      <title>Sliding_window</title>
      <link>https://wncbb.github.io/posts/algo/sliding_window/</link>
      <pubDate>Thu, 23 Jul 2020 11:05:24 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/sliding_window/</guid>
      <description>https://lucifer.ren/blog/2020/03/16/slide-window/</description>
    </item>
    
    <item>
      <title>Reverse_list</title>
      <link>https://wncbb.github.io/posts/algo/reverse_list/</link>
      <pubDate>Sun, 07 Jun 2020 18:34:55 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/reverse_list/</guid>
      <description>1package main 2 3import ( 4	&amp;#34;fmt&amp;#34; 5) 6 7type ListNode struct { 8	Val int 9	Next *ListNode 10} 11 12func main() { 13	l := getList([]int{1, 2, 3, 4, 5, 6}) 14	printList(l) 15	l = reverseList(l) 16	printList(l) 17} 18 19func reverseList(l *ListNode) *ListNode { 20	var head *ListNode 21	var next *ListNode 22	cur := l 23	for cur != nil { 24	/* 25好记忆: 26A=B 27B=C 28C=D 29D=A 30*/ 31	// 保存下一个节点 32	next = cur.</description>
    </item>
    
    <item>
      <title>Backtrack</title>
      <link>https://wncbb.github.io/posts/algo/backtrack/</link>
      <pubDate>Sun, 03 May 2020 21:04:31 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/backtrack/</guid>
      <description>result = [] def backtrack(路径, 选择列表): if 满足结束条件: result.add(路径) return for 选择 in 选择列表: 做选择 backtrack(路径, 选择列表(抠掉这次选择)) 撤销选择  </description>
    </item>
    
    <item>
      <title>Alien_dictionary</title>
      <link>https://wncbb.github.io/posts/algo/alien_dictionary/</link>
      <pubDate>Sun, 26 Apr 2020 11:56:22 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/alien_dictionary/</guid>
      <description>1# -*- encoding: utf-8 -*- 2 3from heapq import heappush, heappop, heapify 4 5class Solution: 6 &amp;#34;&amp;#34;&amp;#34; 7@param board: A list of lists of character 8@param words: A list of string 9@return: A list of string 10&amp;#34;&amp;#34;&amp;#34; 11 def alienOrder(self, words): 12 # write your code here 13 # TODO: check params 14 graph=self.buildGraph(words) 15 print graph 16 17 # print graph 18 19 inDegree=self.buildInDegree(words, graph) 20 21 # print inDegree 22 23 q=[] 24 for i in inDegree: 25 if inDegree[i]==0: 26 q.</description>
    </item>
    
    <item>
      <title>Reservoir_sampling</title>
      <link>https://wncbb.github.io/posts/algo/reservoir_sampling/</link>
      <pubDate>Sat, 25 Apr 2020 14:59:29 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/reservoir_sampling/</guid>
      <description>array result for i=0; i&amp;lt;n; i++{ if i&amp;lt;k{ result[i]=array[i] }else{ r=random(0, i) if r&amp;gt;=k{ continue } result[r]=array[i] } }  </description>
    </item>
    
    <item>
      <title>Union find</title>
      <link>https://wncbb.github.io/posts/algo/union_find/</link>
      <pubDate>Sat, 25 Apr 2020 14:40:38 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/union_find/</guid>
      <description>1class UnionFindSet: 2 def __init__(self, n): 3 self.parents=[] 4 self.ranks=[] 5 for i in range(n): 6 self.parents.append(i) 7 self.ranks.append(0) 8 def connected(self, a, b): 9 return self.find(a)==self.find(b) 10 11 def find(self, x): 12 if x!=self.parents[x]: 13 self.parents[x]=self.find(self.parents[x]) 14 return self.parents[x] 15 16 def union(self, x, y): 17 px=self.find(x) 18 py=self.find(y) 19 # 谁大谁是爹 20 if self.ranks[px]&amp;gt;self.ranks[py]: 21 self.parents[py]=px 22 if self.ranks[px]&amp;lt;self.ranks[py]: 23 self.parents[px]=py 24 if self.ranks[px]==self.ranks[py]: 25 self.parents[py]=px 26 self.ranks[px]+=1 27 28 29t=UnionFindSet(5) 30print t.</description>
    </item>
    
    <item>
      <title>Heap</title>
      <link>https://wncbb.github.io/posts/algo/heap/</link>
      <pubDate>Fri, 24 Apr 2020 22:56:43 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/heap/</guid>
      <description>1package main 2 3import ( 4	&amp;#34;fmt&amp;#34; 5) 6 7func parent(i int) int { 8	return (i - 1) / 2 9} 10 11func left(i int) int { 12	return i*2 + 1 13} 14 15func right(i int) int { 16	return i*2 + 2 17} 18 19func maxHeapify(a []int, i int) { 20	l := left(i) 21	r := right(i) 22	largestIdx := i 23	if l &amp;lt; len(a) &amp;amp;&amp;amp; a[largestIdx] &amp;lt; a[l] { 24	largestIdx = l 25	} 26	if r &amp;lt; len(a) &amp;amp;&amp;amp; a[largestIdx] &amp;lt; a[r] { 27	largestIdx = r 28	} 29 30	if largestIdx !</description>
    </item>
    
    <item>
      <title>Trie</title>
      <link>https://wncbb.github.io/posts/algo/trie/</link>
      <pubDate>Fri, 24 Apr 2020 22:54:49 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/trie/</guid>
      <description>1import collections 2import json 3 4class TrieNode(object): 5 def __init__(self, value=0): 6 self.value = value 7 self.isWord = False 8 self.children = collections.OrderedDict() 9 10 @classmethod 11 def insert(cls, root, word): 12 p = root 13 for c in word: 14 child = p.children.get(c) 15 if not child: 16 child = TrieNode(c) 17 p.children[c] = child 18 p = child 19 20 p.isWord = True </description>
    </item>
    
    <item>
      <title>Merge Sort</title>
      <link>https://wncbb.github.io/posts/algo/merge_sort/</link>
      <pubDate>Wed, 22 Apr 2020 20:16:37 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/merge_sort/</guid>
      <description>1package main 2 3import( 4	&amp;#34;fmt&amp;#34; 5) 6 7func merge(a, b []int)[]int{ 8	rst:=make([]int, 0, len(a)+len(b)) 9	i:=0 10	j:=0 11	for i&amp;lt;len(a) &amp;amp;&amp;amp; j&amp;lt;len(b){ 12	if a[i]&amp;lt;b[j]{ 13	rst=append(rst, a[i]) 14	i++ 15	}else{ 16	rst=append(rst, b[j]) 17	j++ 18	} 19	} 20	rst=append(rst, a[i:]...) 21	rst=append(rst, b[j:]...) 22	return rst 23} 24 25func mergeSort(s []int)[]int{ 26	if len(s)&amp;lt;=1{ 27	return s 28	} 29 30	middleIdx:=len(s)/2 31	left:=mergeSort(s[:middleIdx]) 32	right:=mergeSort(s[middleIdx:]) 33	return merge(left, right) 34} 35 36func main(){ 37	a:=[]int{3, 1, 0, 2, 9, 7, 6, 8, 5, 4} 38	b:=mergeSort(a) 39	fmt.</description>
    </item>
    
    <item>
      <title>Quick Sort</title>
      <link>https://wncbb.github.io/posts/algo/quick_sort/</link>
      <pubDate>Sun, 19 Jan 2020 18:16:32 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/quick_sort/</guid>
      <description>QuickSort(A, p, r) if p&amp;lt;r mid=Partition(A, p, r) QuickSort(A, p, mid-1) QuickSort(A, mid+1, r) Partition(A, p, r) x=A[r] i=p-1 for j=p to r-1 if A[j]&amp;lt;=x i=i+1 exchange A[i] with A[j] i=i+1 exchange A[i] with A[r] // r==j return i  </description>
    </item>
    
    <item>
      <title>DFS</title>
      <link>https://wncbb.github.io/posts/algo/dfs/</link>
      <pubDate>Sun, 19 Jan 2020 17:53:40 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/dfs/</guid>
      <description>DFS(G) for each u in G.V u.color=WHITE u.parent=nil time=0 for each u in G.V if u.color==WHITE DFS-Visit(G, u) DFS-Visit(G, u) time=time+1 u.displayTime=time u.color=GRAY for each v in G.Adj[u] if v.color==WHITE v.parent=u DFS-Visit(G, v) u.color=BLACK time=time+1 u.finishTime=time  </description>
    </item>
    
    <item>
      <title>BFS</title>
      <link>https://wncbb.github.io/posts/algo/bfs/</link>
      <pubDate>Sun, 19 Jan 2020 17:41:20 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/bfs/</guid>
      <description>WHITE: before join the queue GRAY: in the queue BLACK: pop from queue, and after visit all the children
BFS(G, s) for each u in (G.V-{s}) u.color=WHITE u.d=inf u.parent=nil s.color=GRAY s.d=0 s.parent=nil ENQUEUE(Q, s) while Q is not empty: u=DEQUEUE(Q) for each v in G.Adj(u) if v.color=WHITE v.color=GRAY v.d=u.d+1 v.parent=u ENQUEUE(Q, v) u.color=BLACK  </description>
    </item>
    
    <item>
      <title>Bellman Ford</title>
      <link>https://wncbb.github.io/posts/algo/bellman_ford/</link>
      <pubDate>Sun, 19 Jan 2020 15:45:10 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/bellman_ford/</guid>
      <description>References:
 https://www.geeksforgeeks.org/bellman-ford-algorithm-dp-23/
从A出发是否存在到达各个节点的路径(有计算出值当然就可以到达)； 从A出发到达各个节点最短路径(时间最少、或者路径最少等) 图中是否存在负环路（权重之和为负数）   Example: k-flight
time: O(|V|*|E|)
1package main 2 3import ( 4	&amp;#34;fmt&amp;#34; 5	&amp;#34;math&amp;#34; 6) 7 8// Edge means the edge in graph 9type Edge struct { 10	src string 11	dst string 12	weight int 13} 14 15func bf(edges []Edge, fromV string) map[string]int { 16 // key为点，value为目前位置到达key点的距离，刚开始全是无限大 17	distMap := make(map[string]int, 0) 18	for _, v := range edges { 19	distMap[v.src] = math.</description>
    </item>
    
    <item>
      <title>Floyd</title>
      <link>https://wncbb.github.io/posts/algo/floyd/</link>
      <pubDate>Sun, 19 Jan 2020 15:42:53 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/floyd/</guid>
      <description>1package main 2 3import ( 4	&amp;#34;fmt&amp;#34; 5	&amp;#34;math&amp;#34; 6) 7 8func f(m [][]int) [][]int { 9	v := len(m) 10	dist := make([][]int, v, v) 11	for i := 0; i &amp;lt; v; i++ { 12	dist[i] = make([]int, v, v) 13	} 14	for i := 0; i &amp;lt; v; i++ { 15	for j := 0; j &amp;lt; v; j++ { 16	dist[i][j] = m[i][j] 17	} 18	} 19 20	for k := 0; k &amp;lt; v; k++ { 21	for i := 0; i &amp;lt; v; i++ { 22	for j := 0; j &amp;lt; v; j++ { 23	newMinForIJ := dist[i][k] + dist[k][j] 24	if newMinForIJ &amp;lt; dist[i][j] { 25	dist[i][j] = newMinForIJ 26	} 27	} 28	} 29	} 30	return dist 31} 32 33func main() { 34	// a b c d 35	// 0 1 2 3 36	// a 0 0 1 6 10 37	// b 1 na 0 2 na 38	// c 2 na na 0 5 39	// d 3 na na na 0 40	m := [][]int{ 41	{0, 1, 6, 10}, 42	{math.</description>
    </item>
    
    <item>
      <title>dijkstra</title>
      <link>https://wncbb.github.io/posts/algo/dijkstra/</link>
      <pubDate>Sun, 19 Jan 2020 15:05:01 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/dijkstra/</guid>
      <description>1from collections import defaultdict 2from heapq import * 3 4def dijkstra(edges, fromV, toV): 5 g=defaultdict(list) 6 for src, dst, cost in edges: 7 g[src].append((cost, dst)) 8 9 q, seen, mins=[(0, fromV, [])], set(), {fromV: 0} 10 while q: 11 (cost, src, path)=heappop(q) 12 if src not in seen: 13 seen.add(src) 14 path.append(src) 15 if src==toV: 16 return (cost, path) 17 for w, dst in g.get(src, []): 18 if dst in seen: 19 continue 20 oldCostForDst=mins.</description>
    </item>
    
  </channel>
</rss>