<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bytedance on WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/series/bytedance/</link>
    <description>Recent content in bytedance on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Mar 2021 11:02:58 +0800</lastBuildDate><atom:link href="https://wncbb.github.io/series/bytedance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>0020.valid-parentheses</title>
      <link>https://wncbb.github.io/posts/leetcode/0020.valid-parentheses/</link>
      <pubDate>Wed, 10 Mar 2021 11:02:58 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/0020.valid-parentheses/</guid>
      <description>func isValid(s string) bool { sBytes:=[]byte(s) stack:=&amp;amp;Stack{ raw: make([]byte, 0, len(sBytes)), } for _, v:=range sBytes{ switch(v){ case &amp;#39;(&amp;#39;: stack.Push(v) case &amp;#39;)&amp;#39;: if stack.Empty(){ return false } if stack.Top()==&amp;#39;(&amp;#39;{ stack.Pop() }else{ stack.Push(v) } case &amp;#39;[&amp;#39;: stack.Push(v) case &amp;#39;]&amp;#39;: if stack.Empty(){ return false } if stack.Top()==&amp;#39;[&amp;#39;{ stack.Pop() }else{ stack.Push(v) } case &amp;#39;{&amp;#39;: stack.Push(v) case &amp;#39;}&amp;#39;: if stack.Empty(){ return false } if stack.Top()==&amp;#39;{&amp;#39;{ stack.Pop() }else{ stack.Push(v) } } } return stack.Empty() } type Stack struct{ raw []byte } func (s *Stack)Push(v byte){ s.</description>
    </item>
    
    <item>
      <title>0221.maximal-square</title>
      <link>https://wncbb.github.io/posts/leetcode/0221.maximal-square/</link>
      <pubDate>Wed, 10 Mar 2021 10:52:31 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/0221.maximal-square/</guid>
      <description>func maximalSquare(matrix [][]byte) int { dp:=make([][]int, 0, len(matrix)) for i:=0; i&amp;lt;len(matrix); i++{ dp=append(dp, make([]int, len(matrix[0]), len(matrix[0]))) } rst:=0 for i:=0; i&amp;lt;len(matrix); i++{ for j:=0; j&amp;lt;len(matrix[0]); j++{ if matrix[i][j]==&amp;#39;0&amp;#39;{ continue } if i==0 || j==0{ dp[i][j]=1 }else{ dp[i][j]=getMin(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])+1 } if rst&amp;lt;dp[i][j]{ rst=dp[i][j] } } } return rst*rst } func getMin(a int, s ... int)int{ ret:=a for _, v:=range s{ if ret&amp;gt;v{ ret=v } } return ret } </description>
    </item>
    
    <item>
      <title>Cut_woods_k_n</title>
      <link>https://wncbb.github.io/posts/algo/cut_woods_k_n/</link>
      <pubDate>Wed, 10 Mar 2021 10:24:24 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/cut_woods_k_n/</guid>
      <description>https://blog.csdn.net/weixin_39590058/article/details/108397552
给定数组，每个元素代表一个木头的长度，木头可以任意截断， 从这堆木头中截出至少k个相同长度为m的木块，已知k，求max(m) 二分查找 数组排序后，mid=最小值+(最大值-最小值)/2 试一试mid能不能可以，如果不可以，说明mid太大，右边界=mid-1 如果可以，说明mid还可以继续扩大试试，左边界=mid+1 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sort&amp;#34; ) func main() { nums := []int{4, 7, 2, 10, 5} k := 5 rst := maxM(nums, k) fmt.Printf(&amp;#34;rst: %d\n&amp;#34;, rst) } func maxM(nums []int, k int) int { if len(nums) == 0 { return 0 } sort.Slice(nums, func(i, j int) bool { return nums[i] &amp;gt; nums[j] }) max := nums[0] min := nums[len(nums)-1] lo := min hi := max ans := -1 for lo &amp;lt;= hi { mid := lo + (hi-lo)/2 if isFit(nums, k, mid) { ans = mid lo = mid + 1 } else { hi = mid - 1 } } return ans } func isFit(nums []int, k int, v int) bool { count := 0 for i := 0; i &amp;lt; len(nums); i++ { count += nums[i] / v if count &amp;gt;= k { return true } } return false } func getMin(a, b int) int { if a &amp;lt; b { return a } return b } func getMax(a, b int) int { if a &amp;gt; b { return a } return b } </description>
    </item>
    
  </channel>
</rss>
