<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/series/leetcode/</link>
    <description>Recent content in leetcode on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Jan 2022 22:02:20 +0800</lastBuildDate><atom:link href="https://wncbb.github.io/series/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>52.n Queens Ii</title>
      <link>https://wncbb.github.io/leetcode/52.n-queens-ii/</link>
      <pubDate>Thu, 13 Jan 2022 22:02:20 +0800</pubDate>
      
      <guid>https://wncbb.github.io/leetcode/52.n-queens-ii/</guid>
      <description>52. N皇后 II
.x.... ..x... ...x.. ....x. 对于左上-&amp;gt;右下的线上的数据的坐标，满足`(横坐标-纵坐标)`为固定值 ....x. ...x.. ..x... .x.... 对于右上-&amp;gt;左下的线上的数据的坐标，满足`(横坐标+纵坐标)`为固定值 func totalNQueens(n int) (ans int) { columns := make([]bool, n) // 列上是否有皇后  diagonals1 := make([]bool, 2*n-1) // 左上到右下是否有皇后  diagonals2 := make([]bool, 2*n-1) // 右上到左下是否有皇后  var backtrack func(int) backtrack = func(row int) { if row == n { ans++ return } for col, hasQueen := range columns { // 加上n-1是为了防止负数  d1, d2 := row-col+(n-1), row+col // 如果这一列已经存在，或者两种对角线上已经有了，  // 那么不符合条件，直接跳过去  if hasQueen || diagonals1[d1] || diagonals2[d2] { continue } columns[col] = true diagonals1[d1] = true diagonals2[d2] = true backtrack(row + 1) columns[col] = false diagonals1[d1] = false diagonals2[d2] = false } } backtrack(0) return } </description>
    </item>
    
    <item>
      <title>881.boats to Save People</title>
      <link>https://wncbb.github.io/leetcode/881.boats-to-save-people/</link>
      <pubDate>Thu, 13 Jan 2022 20:43:43 +0800</pubDate>
      
      <guid>https://wncbb.github.io/leetcode/881.boats-to-save-people/</guid>
      <description>881. 救生艇
func numRescueBoats(people []int, limit int) (ans int) { sort.Ints(people) light, heavy := 0, len(people)-1 for light &amp;lt;= heavy { if people[light]+people[heavy] &amp;gt; limit { heavy-- } else { light++ heavy-- } ans++ } return } </description>
    </item>
    
    <item>
      <title>剑指 Offer 51. 数组中的逆序对</title>
      <link>https://wncbb.github.io/leetcode/shu-zu-zhong-de-ni-xu-dui-lcof/</link>
      <pubDate>Thu, 13 Jan 2022 19:49:36 +0800</pubDate>
      
      <guid>https://wncbb.github.io/leetcode/shu-zu-zhong-de-ni-xu-dui-lcof/</guid>
      <description>剑指 Offer 51. 数组中的逆序对
func reversePairs(nums []int) int { _, rstCnt:=mergeSort(nums) return rstCnt } func mergeSort(nums []int)([]int, int){ if len(nums)&amp;lt;=1{ return nums, 0 } left:=0 right:=len(nums)-1 mid:=left+(right-left)/2 leftRst, leftCnt:=mergeSort(nums[left:mid+1]) rightRst, rightCnt:=mergeSort(nums[mid+1:right+1]) rst:=make([]int, 0, right-left+1) i:=0 j:=0 rstCnt:=0 for i&amp;lt;len(leftRst) &amp;amp;&amp;amp; j&amp;lt;len(rightRst){ // 如果leftRst[i]大于rightRst[j], 那么i, i+1, i+2, ..., mid都大于  if leftRst[i]&amp;gt;rightRst[j]{ rst=append(rst, rightRst[j]) j++ rstCnt+=mid-i+1 }else{ rst=append(rst, leftRst[i]) i++ } } for i&amp;lt;len(leftRst){ rst=append(rst, leftRst[i]) i++ } for j&amp;lt;len(rightRst){ rst=append(rst, rightRst[j]) j++ } // fmt.</description>
    </item>
    
    <item>
      <title>300. Longest Increasing Subsequence</title>
      <link>https://wncbb.github.io/leetcode/300_longest_increasing_subsequence/</link>
      <pubDate>Wed, 12 Jan 2022 20:20:33 +0800</pubDate>
      
      <guid>https://wncbb.github.io/leetcode/300_longest_increasing_subsequence/</guid>
      <description>300. 最长递增子序列
解法一 动态规划 dp[i]标识，以s[i]结尾的，最长的递增子序列长度 dp[i]=Max(dp[j])+1 // 0&amp;lt;=j&amp;lt;i &amp;amp;&amp;amp; s[j]&amp;lt;s[i] func lengthOfLIS(nums []int) int { dp := make([]int, len(nums)) // 必须初始化为1，以nums[i]结尾的LIS最小长度也是1 	for i := range dp { dp[i] = 1 } for i := 1; i &amp;lt; len(nums); i++ { for j := 0; j &amp;lt; i; j++ { if nums[j] &amp;lt; nums[i] { dp[i] = getMax(dp[i], dp[j]+1) } } } ret := dp[0] for i := 1; i &amp;lt; len(dp); i++ { ret = getMax(ret, dp[i]) } return ret } func getMax(a, b int) int { if a &amp;gt; b { return a } return b } 解法二 二分查找 func lengthOfLIS(nums []int) int { // d[i]标识，长度为len(d[:i+1])的最长递增子序列的最后一个元素 	d := make([]int, 0) for _, v := range nums { // 如果len(d)==0, 那么直接把当前值放入数组  // 如果d[len(d)-1]&amp;lt;v, 比如说d[3]=10, v是11，  // 长度为3的最长递增子序列的最后一个元素是10，那么11正好可以拼接在这个长度为3的LIS后面，构成一个长度为4的LIS 	if len(d) == 0 || d[len(d)-1] &amp;lt; v { d = append(d, v) continue } // 在有序数组d中，找到第一个&amp;gt;=d的索引，因为题目要求LIS严格递增  // 如果d=[4, 10]，而没有等于条件，会返回idx=1，那么d=[4, 4]，那么长度为2的LIS的俩元素都是4，与题目不符合 	idx := firstGreaterOrEqualIndex(v, d) // 下面的逻辑不可能执行到，因为d[len(d)-1]一定大于等于v，否则会走到上面的逻辑  // 因此在d里面找大于等于v的数据，一定是能找到 	// if idx == -1 {  // // 如果找不到，举个例子,d=[4, 10], v=10,  // fmt.</description>
    </item>
    
    <item>
      <title>面试题 17.24. 最大子矩阵</title>
      <link>https://wncbb.github.io/leetcode/mst_1724_max_submatrix_lcci/</link>
      <pubDate>Tue, 11 Jan 2022 08:50:22 +0800</pubDate>
      
      <guid>https://wncbb.github.io/leetcode/mst_1724_max_submatrix_lcci/</guid>
      <description>面试题 17.24. 最大子矩阵
/* . . . . . . . . i . . . . j . . . . i，j为两行的索引，然后每一列数据做求和，得到一维数字 那么，就转变成了求一维数组的最大连续子序列和 */ func getMaxMatrix(matrix [][]int) []int { res:=make([]int,4) m:=len(matrix) n:=len(matrix[0]) total:=math.MinInt32 // i标识上边界 	for i:=0;i&amp;lt;m;i++{ // j标识下边界 	for j:=i;j&amp;lt;m;j++{ // 把上下边界内部的数据，按照列求和 	var sumColumn = make([]int,n) for k:=0;k&amp;lt;n;k++{ for u:=i;u&amp;lt;=j;u++{ sumColumn[k]+=matrix[u][k] } } // 求一维数字连续子序列和的最大值 	l,r,max:=searchMaxSubsequence(sumColumn) //fmt.Println(l,r,max)  if max&amp;gt;total{ total=max res=[]int{i,l,j,r} //fmt.Println(&amp;#34;res:&amp;#34;,res) 	} } } return res } func searchMaxSubsequence(sc []int )(left int,right int,max int ){ left,right=0,0 tmpbegin:=left max=sc[0] dpi:=sc[0] for i:=1;i&amp;lt;len(sc);i++{ if dpi&amp;gt;0{ dpi+=sc[i] }else{ dpi=sc[i] tmpbegin=i } if dpi&amp;gt;max{ max=dpi left=tmpbegin right=i } } return } </description>
    </item>
    
    <item>
      <title>400.nth_digit</title>
      <link>https://wncbb.github.io/leetcode/400_nth_digit/</link>
      <pubDate>Sun, 09 Jan 2022 10:32:07 +0800</pubDate>
      
      <guid>https://wncbb.github.io/leetcode/400_nth_digit/</guid>
      <description>400.第 N 位数字
func findNthDigit(n int) int { // 题目计数是从1开始，代码里是从0开始  n=n-1 // 个位数 每个数值转化为字符串长度为1  // 两位数 每个数值转化为字符串长度为2  // len保存当前n位数的长度  curLen:=1 // first表示，从n里不停的减掉 一位数 两位数 。。。 个数，不够减得时候，  // 假设目前是n位数，标识n位数的第一个数  first:=1 count:=9 for n&amp;gt;curLen*count{ n=n-curLen*count curLen++ first*=10 count*=10 } // n-1是因为，计数都是从0开始计数  // 比如说，对于 1 2 3 4 5 6 7 8 9 10 查找第11个数字，是10的个位数0  // n先减去个位数的个数9, 11-9=2  // 然后确定第二个数在第几个二位数里  first+=n/curLen s:=fmt.Sprintf(&amp;#34;%d&amp;#34;, first) return int(s[n%curLen]-&amp;#39;0&amp;#39;) } </description>
    </item>
    
  </channel>
</rss>
