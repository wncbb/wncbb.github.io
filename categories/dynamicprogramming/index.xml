<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dynamicProgramming on WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/categories/dynamicprogramming/</link>
    <description>Recent content in dynamicProgramming on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Dec 2020 18:40:16 +0800</lastBuildDate>
    
	<atom:link href="https://wncbb.github.io/categories/dynamicprogramming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1035.uncrossed-lines</title>
      <link>https://wncbb.github.io/posts/leetcode/1035.uncrossed-lines/</link>
      <pubDate>Wed, 30 Dec 2020 18:40:16 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/1035.uncrossed-lines/</guid>
      <description>给定 1 4 2 1 2 4 上下相同的数连接画一条线，最多只能画两条线 类似： 1143 本质是最长公共子序列  1func maxUncrossedLines(A []int, B []int) int { 2	dp := make([][]int, 0, len(A)+1) 3	for i := 0; i &amp;lt; len(A)+1; i++ { 4	dp = append(dp, make([]int, len(B)+1, len(B)+1)) 5	} 6 7	for i, v1 := range A { 8	for j, v2 := range B { 9	if v1 == v2 { 10	dp[i+1][j+1] = dp[i][j] + 1 11	} else { 12	dp[i+1][j+1] = getMaxInt(dp[i+1][j], dp[i][j+1]) 13	} 14	} 15	} 16 17	return dp[len(A)][len(B)] 18} 19 20func getMaxInt(a, b int) int { 21	if a &amp;gt; b { 22	return a 23	} 24	return b 25} </description>
    </item>
    
    <item>
      <title>1143.longest-common-subsequence</title>
      <link>https://wncbb.github.io/posts/leetcode/1143.longest-common-subsequence/</link>
      <pubDate>Wed, 30 Dec 2020 18:32:29 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/1143.longest-common-subsequence/</guid>
      <description>两个数组的 最长公共子序列 子序列：不一定连续 1143 子数组：一定连续 718 换汤不换药 1035  1func longestCommonSubsequence(text1 string, text2 string) int { 2	dp := make([][]int, 0, len(text1)+1) 3	for i := 0; i &amp;lt; len(text1)+1; i++ { 4	dp = append(dp, make([]int, len(text2)+1, len(text2)+1)) 5	} 6 7	for i, ch1 := range text1 { 8	for j, ch2 := range text2 { 9	if ch1 == ch2 { 10	dp[i+1][j+1] = dp[i][j] + 1 11	} else { 12	dp[i+1][j+1] = getMaxInt(dp[i+1][j], dp[i][j+1]) 13	} 14	} 15	} 16 17	return dp[len(text1)][len(text2)] 18} 19 20func getMaxInt(a, b int) int { 21	if a &amp;gt; b { 22	return a 23	} 24	return b 25} </description>
    </item>
    
    <item>
      <title>0718.maximum-length-of-repeated-subarray</title>
      <link>https://wncbb.github.io/posts/leetcode/0718.maximum-length-of-repeated-subarray/</link>
      <pubDate>Wed, 30 Dec 2020 17:26:31 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/0718.maximum-length-of-repeated-subarray/</guid>
      <description>两个数组的 最长子数组 子序列：不一定连续 1143 子数组：一定连续 718  1func findLength(A []int, B []int) int { 2	if len(A) == 0 || len(B) == 0 { 3	return 0 4	} 5	6 // dp[i][j]表示以A[i] B[j]结尾的相同子数组的长度 7	dp := make([][]int, 0, len(A)) 8	for i := 0; i &amp;lt; len(A); i++ { 9	dp = append(dp, make([]int, len(B), len(B))) 10	} 11 12 // 为了避免i=0, j=0, 此时0-1=-1，索引非法的问题，先初始化0的情况 13	for i := 0; i &amp;lt; len(A); i++ { 14	if A[i] == B[0] { 15	dp[i][0] = 1 16	} 17	} 18	for j := 0; j &amp;lt; len(B); j++ { 19	if A[0] == B[j] { 20	dp[0][j] = 1 21	} 22	} 23 24	ret := 0 25 26	for i := 1; i &amp;lt; len(A); i++ { 27	for j := 1; j &amp;lt; len(B); j++ { 28	if A[i] == B[j] { 29	dp[i][j] = dp[i-1][j-1] + 1 30	if ret &amp;lt; dp[i][j] { 31	ret = dp[i][j] 32	} 33	} 34	} 35	} 36 37	return ret 38} 或者数组多一位  1func findLength(A []int, B []int) int { 2	if len(A) == 0 || len(B) == 0 { 3	return 0 4	} 5 6	dp := make([][]int, 0, len(A)+1) 7	for i := 0; i &amp;lt; len(A)+1; i++ { 8	dp = append(dp, make([]int, len(B)+1, len(B)+1)) 9	} 10 11	ret := 0 12 13	for i := 1; i &amp;lt;= len(A); i++ { 14	for j := 1; j &amp;lt;= len(B); j++ { 15	if A[i-1] == B[j-1] { 16	dp[i][j] = dp[i-1][j-1] + 1 17	if ret &amp;lt; dp[i][j] { 18	ret = dp[i][j] 19	} 20	} 21	} 22	} 23 24	return ret 25} 26``` </description>
    </item>
    
    <item>
      <title>0032.longest-valid-parentheses</title>
      <link>https://wncbb.github.io/posts/leetcode/0032.longest-valid-parentheses/</link>
      <pubDate>Tue, 22 Dec 2020 16:27:41 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/0032.longest-valid-parentheses/</guid>
      <description>1func longestValidParentheses(s string) int { 2	rst := 0 3 // dp[i] 表示以s[i]字符结尾的最长的合法的括号长度 4	dp := make([]int, len(s), len(s)) 5	for i := 1; i &amp;lt; len(s); i++ { 6	curByte := s[i] 7 // 如果s[i]是左括号，那么以左括号为结尾的字符串，一定不是合法的，长度就是0 8	if curByte == &amp;#39;(&amp;#39; { 9	continue 10	} 11 // 如果s[i]是右括号，比如这种 ?()) 12 // 就需要看一下，s[i-1]结尾的合法字符串的前一个是不是左括号， 13 // 如果是，需要加2（一个是当前的右括号，一个是dp[i-1]之前的左括号) 14	leftIdx := i - dp[i-1] - 1 15	if leftIdx &amp;gt;= 0 &amp;amp;&amp;amp; s[leftIdx] == &amp;#39;(&amp;#39; { 16	dp[i] = dp[i-1] + 2 17	leftLeftIdx := i - dp[i-1] - 2 18 // 这里还需要加上dp[i-1]之前的合法字符串的长度 19 // 对应这种情况: ()(()) 20 // 这里只需要看一次就行，因为如果前面还有的话，一定包含在dp[i-dp[i-1]-2]里了 21	if leftLeftIdx &amp;gt;= 0 { 22	dp[i] += dp[leftLeftIdx] 23	} 24	} 25	if rst &amp;lt; dp[i] { 26	rst = dp[i] 27	} 28 29	} 30	return rst 31} </description>
    </item>
    
    <item>
      <title>0010.regular-expression-matching</title>
      <link>https://wncbb.github.io/posts/leetcode/0010.regular-expression-matching/</link>
      <pubDate>Thu, 17 Dec 2020 17:22:10 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/0010.regular-expression-matching/</guid>
      <description>1func isMatch(s string, p string) bool { 2 // sBytes := []byte(s) 3 // pBytes := []byte(p) 4 // dp[i][j]表示s[:i+1] p[:j+1]是否匹配 5 dp := make([][]bool, 0, len(s)+1) 6 for i := 0; i &amp;lt; len(s)+1; i++ { 7 dp = append(dp, make([]bool, len(p)+1)) 8 } 9 // s跟p都是空字符，肯定匹配的上 10 dp[0][0] = true 11 for i := 1; i &amp;lt; len(p); i++ { 12 // 如果当前p[i]是*，那么*可以把前面的字符搞没 13 // 比如 &amp;#34;b*a*&amp;#34; 跟 &amp;#34;&amp;#34;比较，a*可以去掉，那么就变成&amp;#34;b*&amp;#34;跟&amp;#34;&amp;#34;比较 14 if p[i] == &amp;#39;*&amp;#39; { 15 dp[0][i+1] = dp[0][i-1] 16 } 17 } 18 19	for i, sByte := range s { 20	for j, pByte := range p { 21	switch { 22	case sByte == pByte: 23 // 最简单的case，俩字符一样，那么前面的如果匹配，这个一定匹配 24	dp[i+1][j+1] = dp[i+1][j+1] || dp[i][j] 25	case pByte == &amp;#39;.</description>
    </item>
    
    <item>
      <title>0053.maximum-subarra</title>
      <link>https://wncbb.github.io/posts/leetcode/0053.maximum-subarra/</link>
      <pubDate>Thu, 10 Dec 2020 16:33:51 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/0053.maximum-subarra/</guid>
      <description>1func maxSubArray(nums []int) int { 2	if len(nums) == 0 { 3	return 0 4	} 5	// dp[i]表示以i结尾的和 6	dp := make([]int, len(nums), len(nums)) 7	dp[0] = nums[0] 8	rst := nums[0] 9	for i := 1; i &amp;lt; len(nums); i++ { 10	// 对于以i结尾的连续数组，要么就他自己，要么他自己加上以i-1为结尾的最大值 11	dp[i] = max(nums[i], nums[i]+dp[i-1]) 12	if dp[i] &amp;gt; rst { 13	rst = dp[i] 14	} 15	} 16 17	return rst 18} 19 20func max(a, b int) int { 21	if a &amp;gt; b { 22	return a 23	} 24	return b 25} </description>
    </item>
    
  </channel>
</rss>