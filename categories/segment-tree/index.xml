<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>segment tree on WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/categories/segment-tree/</link>
    <description>Recent content in segment tree on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Mar 2021 15:14:44 +0800</lastBuildDate>
    
	<atom:link href="https://wncbb.github.io/categories/segment-tree/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Segment Tree</title>
      <link>https://wncbb.github.io/posts/algo/segment-tree/</link>
      <pubDate>Tue, 02 Mar 2021 15:14:44 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/segment-tree/</guid>
      <description>n(i) represents the node number of binary tree having i child/s sum = n(0)+n(1)+n(2) 另一个角度，所有节点分两类： 孩子节点， 非孩子节点(有且只有一个，就是root节点) n(1)*1就是有一个孩子节点的所有节点的孩子总数 n(2)*2就是有两个孩子节点的所有节点的孩子总数 sum = sum(孩子节点) + sum(非孩子节点) =n(1)+2*n(2) + 1 因此n(0)+n(1)+n(2)=n(1)+2*n(2)+1 =&amp;gt; n(0)=n(2)+1 对于线段树，n(1)=0 然后对于输入的原始数组，长度为N，也就是n(0)=N， n(2)=n(0)-1=N-1 最好情况，满二叉树： sum = n(0)+n(2)=N+N-1=2N-1 最坏情况: x / \ a x // 倒数第二层 / \ a a // 倒数第一层 倒数第二层的a类型的节点个数:(N-2) 倒数第二层以及上面的节点个数: sum(倒数第二层以及以上) = 2(N-2)+1=2N-4+1=2N-3 sum(倒数第二层节点个数, 虽有只有两个，但是因为是数组，前面全部填空) = (N-2)*2=2N-4 所以sum=2N-3+2N-4=4N-7 所以4N个肯定够用了  package main import &amp;quot;fmt&amp;quot; var merge func(v1, v2 int) int type Node struct { start int end int value int left *Node right *Node } func buildTree(start, end int, vals []int) *Node { if start == end { return &amp;amp;Node{ start: start, end: end, value: vals[start], } } mid := start + (end-start)/2 leftChild := buildTree(start, mid, vals) rightChild := buildTree(mid+1, end, vals) return &amp;amp;Node{ start: start, end: end, value: merge(leftChild.</description>
    </item>
    
  </channel>
</rss>