<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memory on WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/categories/memory/</link>
    <description>Recent content in memory on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Mar 2021 13:44:15 +0800</lastBuildDate><atom:link href="https://wncbb.github.io/categories/memory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>0304.range-sum-query-2d-immutable</title>
      <link>https://wncbb.github.io/posts/leetcode/0304.range-sum-query-2d-immutable/</link>
      <pubDate>Tue, 02 Mar 2021 13:44:15 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/0304.range-sum-query-2d-immutable/</guid>
      <description>A00 A01 A02 A03 A10 A11 A12 A13 A20 A21 A22 A23 A30 A31 A32 A33 A21表示 i&amp;lt;=2, j&amp;lt;=1的矩形的和 // 需要判断下是否越界 如果要求A21 A21=(A11)+(A20)-(A10)+s[2][1] 如果求(i=1, j=1)跟(j=2, j=2)的和 和=A22-A12-A21+A11 如果求(i1, j1)跟(i2, j2)的和, 当然需要判断下边界 和=A[i2][j2]-A[i1-1][j2]-A[i2][j1-1]+A[i1-][j1-1] type NumMatrix struct { raw [][]int } func Constructor(matrix [][]int) NumMatrix { if len(matrix)==0{ return NumMatrix{ raw: nil, } } raw := make([][]int, 0, len(matrix[0])) for i:=0; i&amp;lt;len(matrix); i++{ raw=append(raw, make([]int, len(matrix[0]), len(matrix[0]))) } for i:=0; i&amp;lt;len(matrix); i++{ for j:=0; j&amp;lt;len(matrix[0]); j++{ raw[i][j]=matrix[i][j] if i&amp;gt;0{ raw[i][j]+=raw[i-1][j] } if j&amp;gt;0{ raw[i][j]+=raw[i][j-1] } if i&amp;gt;0 &amp;amp;&amp;amp; j&amp;gt;0{ raw[i][j]-=raw[i-1][j-1] } } } return NumMatrix{ raw: raw, } } func (this *NumMatrix) SumRegion(row1 int, col1 int, row2 int, col2 int) int { ret:=this.</description>
    </item>
    
  </channel>
</rss>
