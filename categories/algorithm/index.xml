<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/categories/algorithm/</link>
    <description>Recent content in algorithm on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jan 2020 17:53:40 +0800</lastBuildDate>
    
	<atom:link href="https://wncbb.github.io/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DFS</title>
      <link>https://wncbb.github.io/posts/algo/dfs/</link>
      <pubDate>Sun, 19 Jan 2020 17:53:40 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/dfs/</guid>
      <description>DFS(G) for each u in G.V u.color=WHITE u.parent=nil time=0 for each u in G.V if u.color==WHITE DFS-Visit(G, u) DFS-Visit(G, u) time=time+1 u.displayTime=time u.color=GRAY for each v in G.Adj[u] if v.color==WHITE v.parent=u DFS-Visit(G, v) u.color=BLACK time=time+1 u.finishTime=time  </description>
    </item>
    
    <item>
      <title>BFS</title>
      <link>https://wncbb.github.io/posts/algo/bfs/</link>
      <pubDate>Sun, 19 Jan 2020 17:41:20 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/bfs/</guid>
      <description>WHITE: before join the queue GRAY: in the queue BLACK: pop from queue, and after visit all the children
BFS(G, s) for each u in (G.V-{s}) u.color=WHITE u.d=inf u.parent=nil s.color=GRAY s.d=0 s.parent=nil ENQUEUE(Q, s) while Q is not empty: u=DEQUEUE(Q) for each v in G.Adj(u) if v.color=WHITE v.color=GRAY v.d=u.d+1 v.parent=u ENQUEUE(Q, v) u.color=BLACK  </description>
    </item>
    
    <item>
      <title>Bellman Ford</title>
      <link>https://wncbb.github.io/posts/algo/bellman_ford/</link>
      <pubDate>Sun, 19 Jan 2020 15:45:10 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/bellman_ford/</guid>
      <description>References:
 https://www.geeksforgeeks.org/bellman-ford-algorithm-dp-23/  Example: k-flight
time: O(|V|*|E|)
1package main 2 3import ( 4	&amp;#34;fmt&amp;#34; 5	&amp;#34;math&amp;#34; 6) 7 8// Edge means the edge in graph 9type Edge struct { 10	src string 11	dst string 12	weight int 13} 14 15func bf(edges []Edge, fromV string) map[string]int { 16	distMap := make(map[string]int, 0) 17	for _, v := range edges { 18	distMap[v.src] = math.MaxInt32 19	distMap[v.dst] = math.MaxInt32 20	} 21	distMap[fromV] = 0 22 23	finished := false 24 // 如果有n个点,从1个点跳到另一个点，不存在环的话，最多跳n-1次 25	for i := 0; i &amp;lt; len(distMap)-1 &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>Floyd</title>
      <link>https://wncbb.github.io/posts/algo/floyd/</link>
      <pubDate>Sun, 19 Jan 2020 15:42:53 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/floyd/</guid>
      <description>1package main 2 3import ( 4	&amp;#34;fmt&amp;#34; 5	&amp;#34;math&amp;#34; 6) 7 8func f(m [][]int) [][]int { 9	v := len(m) 10	dist := make([][]int, v, v) 11	for i := 0; i &amp;lt; v; i++ { 12	dist[i] = make([]int, v, v) 13	} 14	for i := 0; i &amp;lt; v; i++ { 15	for j := 0; j &amp;lt; v; j++ { 16	dist[i][j] = m[i][j] 17	} 18	} 19 20	for k := 0; k &amp;lt; v; k++ { 21	for i := 0; i &amp;lt; v; i++ { 22	for j := 0; j &amp;lt; v; j++ { 23	newMinForIJ := dist[i][k] + dist[k][j] 24	if newMinForIJ &amp;lt; dist[i][j] { 25	dist[i][j] = newMinForIJ 26	} 27	} 28	} 29	} 30	return dist 31} 32 33func main() { 34	// a b c d 35	// 0 1 2 3 36	// a 0 0 1 6 10 37	// b 1 na 0 2 na 38	// c 2 na na 0 5 39	// d 3 na na na 0 40	m := [][]int{ 41	{0, 1, 6, 10}, 42	{math.</description>
    </item>
    
    <item>
      <title>dijkstra</title>
      <link>https://wncbb.github.io/posts/algo/dijkstra/</link>
      <pubDate>Sun, 19 Jan 2020 15:05:01 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/algo/dijkstra/</guid>
      <description>1from collections import defaultdict 2from heapq import * 3 4def dijkstra(edges, fromV, toV): 5 g=defaultdict(list) 6 for src, dst, cost in edges: 7 g[src].append((cost, dst)) 8 9 q, seen, mins=[(0, fromV, [])], set(), {fromV: 0} 10 while q: 11 (cost, src, path)=heappop(q) 12 if src not in seen: 13 seen.add(src) 14 path.append(src) 15 if src==toV: 16 return (cost, path) 17 for w, dst in g.get(src, []): 18 if dst in seen: 19 continue 20 oldCostForDst=mins.</description>
    </item>
    
  </channel>
</rss>