<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stack on WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/categories/stack/</link>
    <description>Recent content in stack on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Mar 2021 15:57:34 +0800</lastBuildDate>
    
	<atom:link href="https://wncbb.github.io/categories/stack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>0316</title>
      <link>https://wncbb.github.io/posts/leetcode/0316.remove-duplicate-letters/</link>
      <pubDate>Sat, 06 Mar 2021 15:57:34 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/0316.remove-duplicate-letters/</guid>
      <description>as same as 1081
func removeDuplicateLetters(s string) string { if len(s)&amp;lt;=1{ return s } sBytes:=[]byte(s) // 判断字符是否在栈中 inStack:=make([]bool, 256) // 判断当前剩下的字符中，每个字符还剩多少个 bytesNum:=make([]int, 256) for _, v:=range sBytes{ bytesNum[v]++ } // 变量名不要跟参数重复 stack:=&amp;amp;Stack{ raw: make([]byte, 0), } for _, v:=range sBytes{ // 只要遍历到，剩下的v的个数就要-- bytesNum[v]-- // 已经在栈中了，就不管了 if inStack[v]{ continue } // 如果栈顶元素t比当前v大，且后面还有栈顶元素t，那与其tv, 还不如vt, 后者字典序更小，因此直接pop出t for stack.Len()&amp;gt;0 &amp;amp;&amp;amp; stack.Top()&amp;gt;v &amp;amp;&amp;amp; bytesNum[stack.Top()]&amp;gt;0{ //fmt.Printf(&amp;quot;pop: %c\n&amp;quot;, stack.Top()) inStack[stack.Pop()]=false } stack.Push(v) // fmt.Printf(&amp;quot;stack: %s\n&amp;quot;, string(stack.raw)) inStack[v]=true } return string(stack.</description>
    </item>
    
  </channel>
</rss>