<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>greedy on WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/categories/greedy/</link>
    <description>Recent content in greedy on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Mar 2021 14:23:40 +0800</lastBuildDate>
    
	<atom:link href="https://wncbb.github.io/categories/greedy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>0055</title>
      <link>https://wncbb.github.io/posts/leetcode/0055.jump-game/</link>
      <pubDate>Sat, 06 Mar 2021 14:23:40 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/0055.jump-game/</guid>
      <description>func canJump(nums []int) bool { // 记录当前位置之前能够到达的最远索引 maxPosition:=0 for i:=0; i&amp;lt;len(nums); i++{ // 如果i大于当前能够到达的最远索引，说明没法到达了 // 因为游戏继续进行下去的前提是能够到达i， // i&amp;gt;maxPosition 表示当前的跳远最远距离都到达不了索引i了 if i&amp;gt;maxPosition{ return false } maxPosition=getMax(maxPosition, i+nums[i]) } return true } func getMax(a, b int)int{ if a&amp;gt;b{ return a } return b }  </description>
    </item>
    
    <item>
      <title>0560.subarray-sum-equals-k</title>
      <link>https://wncbb.github.io/posts/leetcode/0560.subarray-sum-equals-k/</link>
      <pubDate>Thu, 31 Dec 2020 17:01:26 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/0560.subarray-sum-equals-k/</guid>
      <description>题目简介 给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。
示例 1 :
输入:nums = [1,1,1], k = 2 输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。 说明 :
数组的长度为 [1, 20,000]。 数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。
解 解1 1/* 2比如 ABCDEFG... 3如果当前所有的和是Sum(A...G) 4如果存在Sum(A...X), 使得 Sum(A...X)+k=Sum(A...G)， 5也就是说，Sum(A...G)-k这个数存在， 6那么，(X...G]就是满足条件的 7*/ 8 9class Solution { 10 public int subarraySum(int[] nums, int k) { 11 // 扫描一遍数组, 使用map记录出现同样的和的次数, 对每个i计算累计和sum并判断map内是否有sum-k 12 Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); 13 map.</description>
    </item>
    
    <item>
      <title>0435.non-overlapping-intervals</title>
      <link>https://wncbb.github.io/posts/leetcode/0435.non-overlapping-intervals/</link>
      <pubDate>Thu, 31 Dec 2020 15:23:58 +0800</pubDate>
      
      <guid>https://wncbb.github.io/posts/leetcode/0435.non-overlapping-intervals/</guid>
      <description>示例 1: 输入: [ [1,2], [2,3], [3,4], [1,3] ] 输出: 1 解释: 移除 [1,3] 后，剩下的区间没有重叠。 示例 2: 输入: [ [1,2], [1,2], [1,2] ] 输出: 2 解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。 贪心策略: 先按照右边界从小到大排序，然后依次遍历，不能放进去的(左边界小于左边区间的右边界)，就删掉  1import ( 2	&amp;#34;sort&amp;#34; 3) 4 5// non-overlapping-intervals 6func eraseOverlapIntervals(intervals [][]int) int { 7	if len(intervals) == 0 { 8	return 0 9	} 10	sort.Slice(intervals, func(i, j int) bool { 11	return intervals[i][1] &amp;lt; intervals[j][1] 12	}) 13 14	curRight := intervals[0][1] 15	ret := 0 16	for i := 1; i &amp;lt; len(intervals); i++ { 17	if curRight &amp;lt;= intervals[i][0] { 18	curRight = intervals[i][1] 19	} else { 20	ret++ 21	} 22	} 23	return ret 24} </description>
    </item>
    
  </channel>
</rss>