<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DesignPatterns on WNCBB&#39;s blog</title>
    <link>https://wncbb.github.io/designpattern/</link>
    <description>Recent content in DesignPatterns on WNCBB&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Nov 2021 21:25:11 +0800</lastBuildDate><atom:link href="https://wncbb.github.io/designpattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Command</title>
      <link>https://wncbb.github.io/designpattern/command/</link>
      <pubDate>Mon, 15 Nov 2021 21:25:11 +0800</pubDate>
      
      <guid>https://wncbb.github.io/designpattern/command/</guid>
      <description>命令模式 Demo 每个button内部含有一个command(实现了execute方法)
package main type button struct { command command } func (b *button) press() { b.command.execute() } command实现了execute方法
package main type command interface { execute() } 一个command的具体实现
package main type onCommand struct { device device } func (c *onCommand) execute() { c.device.on() } 整体代码
package main func main() { tv := &amp;amp;tv{} onCommand := &amp;amp;onCommand{ device: tv, } offCommand := &amp;amp;offCommand{ device: tv, } onButton := &amp;amp;button{ command: onCommand, } onButton.</description>
    </item>
    
    <item>
      <title>Chain of Responsibility</title>
      <link>https://wncbb.github.io/designpattern/list/</link>
      <pubDate>Mon, 15 Nov 2021 21:17:55 +0800</pubDate>
      
      <guid>https://wncbb.github.io/designpattern/list/</guid>
      <description>责任链 demo 医院场景，前台-&amp;gt;看医生-&amp;gt;取药
// 对医院场景(前台/看医生/取药)的抽象 type department interface { execute(*patient) setNext(department) } 前台接待实现
package main import &amp;#34;fmt&amp;#34; type reception struct { next department } func (r *reception) execute(p *patient) { if p.registrationDone { fmt.Println(&amp;#34;Patient registration already done&amp;#34;) r.next.execute(p) return } fmt.Println(&amp;#34;Reception registering patient&amp;#34;) p.registrationDone = true r.next.execute(p) } func (r *reception) setNext(next department) { r.next = next } 整体调用
package main func main() { cashier := &amp;amp;cashier{} //Set next for medical department  medical := &amp;amp;medical{} medical.</description>
    </item>
    
    <item>
      <title>List</title>
      <link>https://wncbb.github.io/designpattern/chain-of-responsibility/</link>
      <pubDate>Mon, 15 Nov 2021 21:17:55 +0800</pubDate>
      
      <guid>https://wncbb.github.io/designpattern/chain-of-responsibility/</guid>
      <description>责任链 demo 医院场景，前台-&amp;gt;看医生-&amp;gt;取药
// 对医院场景(前台/看医生/取药)的抽象 type department interface { execute(*patient) setNext(department) } 前台接待实现
package main import &amp;#34;fmt&amp;#34; type reception struct { next department } func (r *reception) execute(p *patient) { if p.registrationDone { fmt.Println(&amp;#34;Patient registration already done&amp;#34;) r.next.execute(p) return } fmt.Println(&amp;#34;Reception registering patient&amp;#34;) p.registrationDone = true r.next.execute(p) } func (r *reception) setNext(next department) { r.next = next } 整体调用
package main func main() { cashier := &amp;amp;cashier{} //Set next for medical department  medical := &amp;amp;medical{} medical.</description>
    </item>
    
    <item>
      <title>SOLID</title>
      <link>https://wncbb.github.io/designpattern/solid/</link>
      <pubDate>Thu, 19 Aug 2021 16:31:13 +0800</pubDate>
      
      <guid>https://wncbb.github.io/designpattern/solid/</guid>
      <description>Single-responsibility principle 单一职责原则
 A class should have one, and only one, reason to change.
  Every class should have only one responsibility.
 Open-closed principle ======= 开闭原则
 You should be able to extend a classes behavior, without modifying it.
  Be open for extension, but closed for modification.
 Liskov substitution principle ======= 里氏替换原则
 Derived classes must be substitutable for their base classes.
  Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</description>
    </item>
    
  </channel>
</rss>
